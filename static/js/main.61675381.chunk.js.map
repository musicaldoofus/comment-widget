{"version":3,"sources":["components/Loading/index.js","components/RatingsContainer/index.js","helpers/generateId.js","components/Messages/index.js","helpers/constants.js","components/InputContainer/index.js","components/Comment/index.js","pages/Root/index.js","pages/Admin/index.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Star","isActive","small","onClick","RatingsContainer","rating","onChange","stars","Array","from","length","_","i","key","generateId","concat","Math","random","ErrorMessage","onDismiss","href","SuccessMessage","WaitingMessage","CONSTANTS","PUT_ENDPOINT_URL","GET_ENDPOINT_URL","InputContainer","onSubmit","useState","inputValue","setInput","submitStatus","setSubmitStatus","authorInputValue","setAuthor","setRating","handleMessageDismiss","placeholder","value","e","preventDefault","target","r","type","params","CommentId","Author","Rating","Body","axios","put","then","d","catch","err","console","error","Comment","timestamp","src","alt","toCommentBox","c","Root","comments","setComments","useEffect","get","data","map","Admin","Routes","exact","path","component","App","window","location","indexOf","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61675381.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            Loading...\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport './Ratings.css';\r\n\r\nconst Star = ({isActive, small, onClick}) => {\r\n    //console.log('isActive', isActive);\r\n    return (\r\n        <div onClick={onClick} className={`ratings-star${isActive ? ' active' : ''}${small ? ' small' : ''}`}></div>\r\n    );\r\n}\r\n\r\nconst RatingsContainer = ({rating, onChange}) => {\r\n    const stars = Array.from({length: 5}, (_, i) => (\r\n        <Star\r\n            key={i}\r\n            isActive={rating > i}\r\n            onClick={() => onChange(i + 1)}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"ratings-container\">\r\n            {stars}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RatingsContainer;\r\nexport { Star };","const generateId = () => ''.concat(Math.random() * 100).concat('_comment');\r\n\r\nexport default generateId;","import React from 'react';\r\n\r\nconst WaitingMessage = ({onDismiss}) => {\r\n    return (\r\n      <div className=\"message waiting\">\r\n        <button onClick={onDismiss}>&times;</button>\r\n        Waiting for the server...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const ErrorMessage = ({onDismiss}) => {\r\n    return (\r\n      <div className=\"message error\">\r\n        <button onClick={onDismiss}>&times;</button>\r\n        Looks like there was an error.\r\n        <br/>\r\n        For more info, email <a href=\"mailto:jeddle@amazon.com\">jeddle@amazon.com</a>.\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  const SuccessMessage = ({onDismiss}) => {\r\n    return (\r\n      <div className=\"message success\">\r\n        <button onClick={onDismiss}>&times;</button>\r\n        Your message was posted!\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default WaitingMessage;\r\nexport { ErrorMessage, SuccessMessage };","const CONSTANTS = {\r\n    PUT_ENDPOINT_URL: 'https://h1qa6lowel.execute-api.us-west-2.amazonaws.com/prod/',\r\n    GET_ENDPOINT_URL: 'https://aa01reveic.execute-api.us-west-2.amazonaws.com/prod'\r\n}\r\n\r\nexport default CONSTANTS;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport RatingsContainer from '../RatingsContainer';\r\nimport generateId from '../../helpers/generateId';\r\nimport WaitingMessage, { ErrorMessage, SuccessMessage } from '../Messages';\r\nimport CONSTANTS from '../../helpers/constants';\r\nimport './InputContainer.css';\r\n\r\nconst InputContainer = ({/*author,*/ onSubmit}) => { //to extend: pass author prop from token on authorization (otherwise, return <Loading/> while waiting for token in <App/>)\r\n    const [inputValue, setInput] = useState('');\r\n    const [submitStatus, setSubmitStatus] = useState(null); //(null|'waiting'|'success'|'failure')\r\n    const [authorInputValue, setAuthor] = useState(null);\r\n    const [rating, setRating] = useState(5);\r\n  \r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setInput(e.target.value);\r\n    }\r\n  \r\n    const handleOnSubmit = () => {\r\n      setSubmitStatus('waiting');\r\n      const params = {\r\n        CommentId: generateId(),\r\n        Author: authorInputValue ? authorInputValue : 'anonymous',\r\n        Rating: rating,\r\n        Body: inputValue\r\n      };\r\n      axios.put(CONSTANTS.PUT_ENDPOINT_URL, params)\r\n        .then(d => {\r\n          setSubmitStatus('success');\r\n          onSubmit(params);\r\n        })\r\n        .catch(err => {\r\n          console.error('error', err);\r\n          setSubmitStatus('failure');\r\n        });\r\n    }\r\n  \r\n    const handleMessageDismiss = () => setSubmitStatus(null);\r\n\r\n    const handleAuthorOnChange= (e) => setAuthor(e.target.value);\r\n\r\n    const handleRatingsOnChange = (r) => setRating(r);\r\n  \r\n    return (  \r\n      <div className=\"comments-input-container\">\r\n        {submitStatus === 'waiting' && <WaitingMessage onDismiss={handleMessageDismiss}/>}\r\n        {submitStatus === 'success' && <SuccessMessage onDismiss={handleMessageDismiss}/>}\r\n        {submitStatus === 'failure' && <ErrorMessage onDismiss={handleMessageDismiss}/>}\r\n        <textarea placeholder=\"Enter comment here\" value={inputValue} onChange={handleOnChange}/>\r\n        <RatingsContainer rating={rating} onChange={handleRatingsOnChange}/>\r\n        <input type=\"text\" placeholder=\"Enter login@ here (opt)\" value={authorInputValue ? authorInputValue : ''} onChange={handleAuthorOnChange}/>\r\n        <button onClick={handleOnSubmit}>Submit</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default InputContainer","import React from 'react';\r\nimport { Star } from '../RatingsContainer';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({Author, Rating, timestamp, Body}) => {\r\n  const stars = Array.from({length: 5}, (_, i) => <Star small key={i} isActive={Rating > i}/>);\r\n  return (\r\n    <div className=\"comment\">\r\n      <div className=\"comment-avatar\">\r\n        <div className=\"comment-avatar-img\">\r\n          <img src=\"#\" alt=\"\"/>\r\n        </div>\r\n        <div className=\"comment-avatar-metadata\">\r\n          Posted: {timestamp}\r\n          by: {Author}\r\n        </div>\r\n      </div>\r\n      <div className=\"comment-body\">\r\n        <div className=\"comment-rating\">\r\n          {stars}\r\n        </div>\r\n        {Body}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst toCommentBox = (c) => {\r\n  return (\r\n    <Comment\r\n      key={c.CommentId}\r\n      {...c}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Comment;\r\nexport { toCommentBox };","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../../components/Loading';\r\nimport InputContainer from '../../components/InputContainer';\r\nimport { toCommentBox } from '../../components/Comment';\r\nimport CONSTANTS from '../../helpers/constants';\r\nimport './Root.css';\r\n\r\nconst Root = () => {\r\n    const [comments, setComments] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      axios.get(CONSTANTS.GET_ENDPOINT_URL)\r\n        .then(({data}) => setComments(data))\r\n        .catch(err => console.error(err));\r\n    }, []);\r\n  \r\n    const handleSubmit = (c) => {\r\n      setComments(comments.concat(c))/*.sort(byDate)*/\r\n    }\r\n  \r\n      return (\r\n          <div className=\"comments-container\">\r\n        <InputContainer onSubmit={handleSubmit}/>\r\n        <div className=\"comments-list-container\">\r\n          {comments ?\r\n            comments.map(toCommentBox)\r\n            : <Loading/>\r\n          }\r\n        </div>\r\n      </div>  \r\n    );\r\n  }\r\n\r\n  export default Root;","import React from 'react';\r\nimport './Admin.css';\r\n\r\n/*\r\ncreate authorized and public routes & import into this file\r\non authorized route mount, send key/other secret to server to fetch data\r\n*/\r\n\r\nconst Admin = () => {\r\n    return (\r\n        <div className=\"page admin\">\r\n            /admin\r\n            <br/>\r\n            Welcome, it's a cold and lonely place\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;","import React from 'react';\nimport { HashRouter, BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Root from './pages/Root';\nimport Admin from './pages/Admin';\nimport './App.css';\n\nconst withHashRouter = () => (\n\t<HashRouter>\n\t\t<Routes/>\n\t</HashRouter>\n);\n\nconst withBrowserRouter = () => (\n\t<Router>\n\t\t<Routes/>\n\t</Router>\n);\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        component={Root}\n      />\n      <Route\n        path=\"/admin\"\n        component={Admin}\n      />\n    </Switch>\n  )\n}\n\nconst App = () => {\n  const isGhPages = window.location.href.indexOf('github.io') > -1;\n  return isGhPages ? withHashRouter() : withBrowserRouter();\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}