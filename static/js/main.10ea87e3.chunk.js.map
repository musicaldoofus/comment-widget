{"version":3,"sources":["components/Loading/index.js","helpers/generateId.js","components/Messages/index.js","helpers/constants.js","components/InputContainer/index.js","components/Comment/index.js","pages/Root/index.js","pages/Admin/index.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","generateId","concat","Math","random","ErrorMessage","onDismiss","onClick","href","SuccessMessage","WaitingMessage","CONSTANTS","PUT_ENDPOINT_URL","GET_ENDPOINT_URL","InputContainer","author","onSubmit","useState","inputValue","setInput","submitStatus","setSubmitStatus","handleMessageDismiss","type","value","onChange","e","preventDefault","target","params","CommentId","Author","Body","axios","put","then","d","catch","err","console","error","Comment","timestamp","src","alt","toCommentBox","c","key","Root","comments","setComments","useEffect","get","data","map","Admin","Routes","exact","path","component","App","window","location","indexOf","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10ea87e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            Loading...\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","const generateId = () => ''.concat(Math.random() * 100).concat('_comment');\r\n\r\nexport default generateId;","import React from 'react';\r\n\r\nconst WaitingMessage = ({onDismiss}) => {\r\n    return (\r\n      <div className=\"message waiting\">\r\n        <button onClick={onDismiss}>&times;</button>\r\n        Waiting for the server...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const ErrorMessage = ({onDismiss}) => {\r\n    return (\r\n      <div className=\"message error\">\r\n        <button onClick={onDismiss}>&times;</button>\r\n        Looks like there was an error.\r\n        <br/>\r\n        For more info, email <a href=\"mailto:jeddle@amazon.com\">jeddle@amazon.com</a>.\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  const SuccessMessage = ({onDismiss}) => {\r\n    return (\r\n      <div className=\"message success\">\r\n        <button onClick={onDismiss}>&times;</button>\r\n        Your message was posted!\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default WaitingMessage;\r\nexport { ErrorMessage, SuccessMessage };","const CONSTANTS = {\r\n    PUT_ENDPOINT_URL: 'https://h1qa6lowel.execute-api.us-west-2.amazonaws.com/prod/',\r\n    GET_ENDPOINT_URL: 'https://aa01reveic.execute-api.us-west-2.amazonaws.com/prod'\r\n}\r\n\r\nexport default CONSTANTS;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport generateId from '../../helpers/generateId';\r\nimport WaitingMessage, { ErrorMessage, SuccessMessage } from '../Messages';\r\nimport CONSTANTS from '../../helpers/constants';\r\n\r\nconst InputContainer = ({author, onSubmit}) => {\r\n    const [inputValue, setInput] = useState('Enter comment here');\r\n    const [submitStatus, setSubmitStatus] = useState(null); //(null|'waiting'|'success'|'failure')\r\n  \r\n    const handleOnChange = (e) => {\r\n      e.preventDefault();\r\n      setInput(e.target.value);\r\n    }\r\n  \r\n    const handleOnSubmit = () => {\r\n      setSubmitStatus('waiting');\r\n      const params = {\r\n        CommentId: generateId(),\r\n        Author: author ? author : 'anonymous',\r\n        Body: inputValue\r\n      };\r\n      axios.put(CONSTANTS.PUT_ENDPOINT_URL, params)\r\n        .then(d => {\r\n          setSubmitStatus('success');\r\n          onSubmit(params);\r\n        })\r\n        .catch(err => {\r\n          console.error('error', err);\r\n          setSubmitStatus('failure');\r\n        });\r\n    }\r\n  \r\n    const handleMessageDismiss = () => setSubmitStatus(null);\r\n  \r\n    return (  \r\n      <div className=\"comments-input-container\">\r\n        {submitStatus === 'waiting' && <WaitingMessage onDismiss={handleMessageDismiss}/>}\r\n        {submitStatus === 'success' && <SuccessMessage onDismiss={handleMessageDismiss}/>}\r\n        {submitStatus === 'failure' && <ErrorMessage onDismiss={handleMessageDismiss}/>}\r\n        <input type=\"text\" value={inputValue} onChange={handleOnChange}/>\r\n        <button onClick={handleOnSubmit}>Submit</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default InputContainer","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({Author, timestamp, Body}) => {\r\n  return (\r\n    <div className=\"comment\">\r\n      <div className=\"comment-avatar\">\r\n        <div className=\"comment-avatar-img\">\r\n          <img src=\"#\" alt=\"\"/>\r\n        </div>\r\n        <div className=\"comment-avatar-metadata\">\r\n          Posted: {timestamp}\r\n          by: {Author}\r\n        </div>\r\n      </div>\r\n      <div className=\"comment=body\">\r\n        {Body}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst toCommentBox = (c) => {\r\n  return (\r\n    <Comment\r\n      key={c.CommentId}\r\n      {...c}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Comment;\r\nexport { toCommentBox };","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Loading from '../../components/Loading';\r\nimport InputContainer from '../../components/InputContainer';\r\nimport { toCommentBox } from '../../components/Comment';\r\nimport CONSTANTS from '../../helpers/constants';\r\nimport './Root.css';\r\n\r\nconst Root = () => {\r\n    const [comments, setComments] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      axios.get(CONSTANTS.GET_ENDPOINT_URL)\r\n        .then(({data}) => setComments(data))\r\n        .catch(err => console.error(err));\r\n    }, []);\r\n  \r\n    const handleSubmit = (c) => {\r\n      setComments(comments.concat(c))/*.sort(byDate)*/\r\n    }\r\n  \r\n      return (\r\n          <div className=\"comments-container\">\r\n        <InputContainer onSubmit={handleSubmit}/>\r\n        <div className=\"comments-list-container\">\r\n          {comments ?\r\n            comments.map(toCommentBox)\r\n            : <Loading/>\r\n          }\r\n        </div>\r\n      </div>  \r\n    );\r\n  }\r\n\r\n  export default Root;","import React from 'react';\r\nimport './Admin.css';\r\n\r\n/*\r\ncreate authorized and public routes & import into this file\r\non authorized route mount, send key/other secret to server to fetch data\r\n*/\r\n\r\nconst Admin = () => {\r\n    return (\r\n        <div className=\"page admin\">\r\n            /admin\r\n            <br/>\r\n            Welcome, it's a cold and lonely place\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;","import React from 'react';\nimport { HashRouter, BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Root from './pages/Root';\nimport Admin from './pages/Admin';\nimport './App.css';\n\nconst withHashRouter = () => (\n\t<HashRouter>\n\t\t<Routes/>\n\t</HashRouter>\n);\n\nconst withBrowserRouter = () => (\n\t<Router>\n\t\t<Routes/>\n\t</Router>\n);\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        component={Root}\n      />\n      <Route\n        path=\"/admin\"\n        component={Admin}\n      />\n    </Switch>\n  )\n}\n\nconst App = () => {\n  const isGhPages = window.location.href.indexOf('github.io') > -1;\n  return isGhPages ? withHashRouter() : withBrowserRouter();\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}